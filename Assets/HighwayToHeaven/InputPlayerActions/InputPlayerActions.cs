//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/HighwayToHeaven/InputPlayerActions/InputPlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputPlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputPlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputPlayerActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""ac9329f4-0480-4f2f-b812-75dd720f9584"",
            ""actions"": [
                {
                    ""name"": ""Flip"",
                    ""type"": ""Button"",
                    ""id"": ""cd806609-55d0-45cb-9805-7f7c9c42c038"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""202e3bb4-8b77-45d7-8473-0bfb10568d49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""7f6b0835-9849-4896-8010-f8cef9cfa7ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItem"",
                    ""type"": ""Button"",
                    ""id"": ""cb53d39c-ebd2-48d1-b9b5-39c4d081f24d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7cac5708-47f6-4b4a-8ef8-50eb86fec4e5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a451c962-3830-4d13-9d59-d2457d4af3fa"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""585df1d5-3b28-4ec7-9a88-9f024686fca5"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82ad6033-7fe1-44f3-ac07-c8c518ab725e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ActivateBoost"",
            ""id"": ""a50d6c44-7c3e-4354-a0ea-f7897e80cb55"",
            ""actions"": [
                {
                    ""name"": ""GuitarBar"",
                    ""type"": ""Button"",
                    ""id"": ""219d3fa6-e763-4aed-bde2-08f078053e86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d3170e83-0c9d-47c3-8ea7-1fb9c40ed980"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GuitarBar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Flip = m_Player.FindAction("Flip", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
        m_Player_UseItem = m_Player.FindAction("UseItem", throwIfNotFound: true);
        // ActivateBoost
        m_ActivateBoost = asset.FindActionMap("ActivateBoost", throwIfNotFound: true);
        m_ActivateBoost_GuitarBar = m_ActivateBoost.FindAction("GuitarBar", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Flip;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Pause;
    private readonly InputAction m_Player_UseItem;
    public struct PlayerActions
    {
        private @InputPlayerActions m_Wrapper;
        public PlayerActions(@InputPlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Flip => m_Wrapper.m_Player_Flip;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Pause => m_Wrapper.m_Player_Pause;
        public InputAction @UseItem => m_Wrapper.m_Player_UseItem;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Flip.started += instance.OnFlip;
            @Flip.performed += instance.OnFlip;
            @Flip.canceled += instance.OnFlip;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @UseItem.started += instance.OnUseItem;
            @UseItem.performed += instance.OnUseItem;
            @UseItem.canceled += instance.OnUseItem;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Flip.started -= instance.OnFlip;
            @Flip.performed -= instance.OnFlip;
            @Flip.canceled -= instance.OnFlip;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @UseItem.started -= instance.OnUseItem;
            @UseItem.performed -= instance.OnUseItem;
            @UseItem.canceled -= instance.OnUseItem;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // ActivateBoost
    private readonly InputActionMap m_ActivateBoost;
    private List<IActivateBoostActions> m_ActivateBoostActionsCallbackInterfaces = new List<IActivateBoostActions>();
    private readonly InputAction m_ActivateBoost_GuitarBar;
    public struct ActivateBoostActions
    {
        private @InputPlayerActions m_Wrapper;
        public ActivateBoostActions(@InputPlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @GuitarBar => m_Wrapper.m_ActivateBoost_GuitarBar;
        public InputActionMap Get() { return m_Wrapper.m_ActivateBoost; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActivateBoostActions set) { return set.Get(); }
        public void AddCallbacks(IActivateBoostActions instance)
        {
            if (instance == null || m_Wrapper.m_ActivateBoostActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActivateBoostActionsCallbackInterfaces.Add(instance);
            @GuitarBar.started += instance.OnGuitarBar;
            @GuitarBar.performed += instance.OnGuitarBar;
            @GuitarBar.canceled += instance.OnGuitarBar;
        }

        private void UnregisterCallbacks(IActivateBoostActions instance)
        {
            @GuitarBar.started -= instance.OnGuitarBar;
            @GuitarBar.performed -= instance.OnGuitarBar;
            @GuitarBar.canceled -= instance.OnGuitarBar;
        }

        public void RemoveCallbacks(IActivateBoostActions instance)
        {
            if (m_Wrapper.m_ActivateBoostActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActivateBoostActions instance)
        {
            foreach (var item in m_Wrapper.m_ActivateBoostActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActivateBoostActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActivateBoostActions @ActivateBoost => new ActivateBoostActions(this);
    public interface IPlayerActions
    {
        void OnFlip(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnUseItem(InputAction.CallbackContext context);
    }
    public interface IActivateBoostActions
    {
        void OnGuitarBar(InputAction.CallbackContext context);
    }
}
